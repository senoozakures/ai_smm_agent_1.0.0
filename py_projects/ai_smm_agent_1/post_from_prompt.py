#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π.
- –ï—Å–ª–∏ –∑–∞–¥–∞–Ω OPENAI_API_KEY, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ ContentGenerator
- –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ–π —à–∞–±–ª–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
from datetime import datetime
from typing import List
import os
from dotenv import load_dotenv

load_dotenv()

from app.models.product import Product, PlatformType, ContentType
from app.models.content import PostCreate
from app.services.content.generator import ContentGenerator
from app.services.social.manager import SocialMediaManager


def prompt_non_empty(label: str, default: str = "") -> str:
	value = input(f"{label}{' ['+default+']' if default else ''}: ").strip()
	return value or default


def is_direct_image_url(url: str) -> bool:
	url_l = url.lower()
	return any(url_l.endswith(ext) for ext in (".jpg", ".jpeg", ".png", ".gif", ".webp"))


def build_fallback_post(product_name: str, description: str, audience: str, tone: str) -> str:
	lines: List[str] = []
	lines.append(f"{product_name}: {description}")
	lines.append("")
	lines.append(f"–î–ª—è: {audience}")
	lines.append(f"–¢–æ–Ω: {tone}")
	lines.append("")
	lines.append("–ü–æ—á–µ–º—É —ç—Ç–æ —Ü–µ–Ω–Ω–æ:")
	lines.append("- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–ª—å–∑–∞")
	lines.append("- –ü–æ–Ω—è—Ç–Ω–∞—è –ø–æ–¥–∞—á–∞")
	lines.append("- –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏")
	return "\n".join(lines)


async def main():
	print("üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π")
	print("=" * 60)

	# –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–∫
	bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
	channel_id = os.getenv("TELEGRAM_CHANNEL_ID")
	if not bot_token or not channel_id:
		print("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Telegram. –£–∫–∞–∂–∏—Ç–µ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHANNEL_ID –≤ .env –∏–ª–∏ —á–µ—Ä–µ–∑ py setup_env.py")
		return

	# –°–±–æ—Ä –ø–æ–∂–µ–ª–∞–Ω–∏–π
	product_name = prompt_non_empty("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞/—É—Å–ª—É–≥–∏", "–û–Ω–ª–∞–π–Ω –∫—É—Ä—Å –ø–æ Python")
	description = prompt_non_empty("–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", "–° –Ω—É–ª—è –¥–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
	audience = prompt_non_empty("–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è", "–ù–æ–≤–∏—á–∫–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏")
	tone = prompt_non_empty("–¢–æ–Ω (friendly, expert, bold...)", "friendly")
	hashtags_raw = input("–•–µ—à—Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ").strip()
	hashtags = [h.strip() for h in hashtags_raw.split(",") if h.strip()] if hashtags_raw else []
	image_url_input = input("–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø—Ä—è–º–æ–π URL –∫ .jpg/.png/.webp): ").strip()
	if image_url_input.startswith("@"):
		image_url_input = image_url_input[1:]

	# –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–¥—É–∫—Ç –∏ –º–µ–Ω–µ–¥–∂–µ—Ä
	product = Product(
		id=1,
		name=product_name,
		description=description,
		target_audience=audience,
		platforms=[PlatformType.TELEGRAM],
		created_at=datetime.now(),
		updated_at=datetime.now()
	)

	generator = ContentGenerator()
	manager = SocialMediaManager()

	# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É: —á–µ—Ä–µ–∑ OpenAI (—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è) –∏–ª–∏ fallback
	text: str
	–≤—Åimage_url: str | None = None
	use_ai = bool(os.getenv("OPENAI_API_KEY"))
	if use_ai:
		try:
			# –ü–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: 1 –ø–æ—Å—Ç + –∫–∞—Ä—Ç–∏–Ω–∫–∞
			from app.models.content import ContentGenerationRequest
			req = ContentGenerationRequest(
				product_id=product.id,
				content_type=ContentType.POST,
				post_count=1,
				platforms=[PlatformType.TELEGRAM],
				tone=tone,
				include_images=True,
				include_videos=False
			)
			content = await generator.generate_content(product, req)
			post0 = content.posts[0]
			text = post0.text
			image_url = getattr(post0, 'image_url', None)
			if not hashtags:
				hashtags = post0.hashtags
		except Exception as e:
			print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ OpenAI: {e}")
			print("‚ñ∂ –ò—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ—Å—Ç–æ–π —à–∞–±–ª–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
			text = build_fallback_post(product_name, description, audience, tone)
			image_url = None
	else:
		print("‚ÑπÔ∏è OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ –ø—Ä–æ—Å—Ç–æ–º—É —à–∞–±–ª–æ–Ω—É")
		text = build_fallback_post(product_name, description, audience, tone)
		image_url = None

	# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª —Å—Å—ã–ª–∫—É ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ
	if image_url_input:
		if is_direct_image_url(image_url_input):
			image_url = image_url_input
		else:
			# –ù–µ –ø—Ä—è–º–æ–π URL –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äî –¥–æ–±–∞–≤–∏–º —Å—Å—ã–ª–∫—É –≤ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –±—ã–ª –ø—Ä–µ–≤—å—é –ª–∏–Ω–∫–∞
			text = f"{text}\n\n–ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url_input}"

	post = PostCreate(
		product_id=product.id,
		text=text,
		hashtags=hashtags,
		platforms=[PlatformType.TELEGRAM],
		content_type=ContentType.POST,
		image_url=image_url
	)

	print("\nüìù –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:\n" + "-"*40)
	print(post.text)
	if post.hashtags:
		print("\n–•–µ—à—Ç–µ–≥–∏:", ", ".join(post.hashtags))

	confirm = input("\n–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å? (y/N): ").strip().lower()
	if confirm != "y":
		print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
		return

	result = await manager.publish_post(post, [PlatformType.TELEGRAM])
	tg = result.get("telegram", {})
	if tg.get("success"):
		print("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")
		if tg.get("url"):
			print("URL:", tg["url"])
	else:
		print("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", tg.get("error"))

	print("\n–ì–æ—Ç–æ–≤–æ.")


if __name__ == "__main__":
	asyncio.run(main())
